//CHAPTER 12.15

package Chapter_12;


import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;

public class EventDisplay extends JFrame {

    private JTextArea eventArea;

    public EventDisplay() {
        setTitle("Event Display");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                logEvent("Window Closing");
            }
        });

        eventArea = new JTextArea(10, 30);
        eventArea.setEditable(false);
        add(new JScrollPane(eventArea), BorderLayout.CENTER);

        JPanel panel = new JPanel();
        add(panel, BorderLayout.PAGE_END);

        JButton button = new JButton("Click Me");
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                logEvent("Button Clicked");
            }
        });
        panel.add(button);

        JCheckBox checkBox = new JCheckBox("Check Me");
        checkBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                logEvent("Checkbox " + (e.getStateChange() == ItemEvent.SELECTED ? "Selected" : "Deselected"));
            }
        });
        panel.add(checkBox);

            DefaultListModel<String> listModel = new DefaultListModel<>();
            listModel.addElement("Item 1");
            listModel.addElement("Item 2");
            listModel.addElement("Item 3");

            JList<String> list = new JList<>(listModel);
            list.addListSelectionListener(new ListSelectionListener() {
                @Override
                public void valueChanged(ListSelectionEvent e) {
                    logEvent("List Selection Changed");
          }
      });

        panel.add(new JScrollPane(list));

        addHierarchyListener(new HierarchyListener() {
            @Override
            public void hierarchyChanged(HierarchyEvent e) {
                logEvent("Hierarchy Changed");
            }
        });
        
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        setVisible(true);
    }

    private void logEvent(String message) {
        eventArea.append(message + "\n");
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new EventDisplay());
    }
}
